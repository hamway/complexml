<?php

require_once 'CompleXml/Auth.php';

/**
 * Test class for CompleXml_Auth.
 * Generated by PHPUnit on 2010-02-12 at 11:01:30.
 * @group Auth
 */
class CompleXml_AuthTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var CompleXml_Auth
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = CompleXml_Auth::getInstance();
    }
    
    public function testGetInstance()
    {
        $test = CompleXml_Auth::getInstance();
        $this->assertEquals($this->object, $test);
    }
    
    public function testGetUser()
    {
        $user = array(1, 2, 3, 4);
        $this->object->authenticate($user);
        $this->assertEquals($user, $this->object->getUser());
    }
    
    public function testIsAuth()
    {
        $this->object->clearIdentity();
        $this->assertFalse($this->object->isAuth());
    }
    
    public function testAuthenticate()
    {
        $user = array(1, 2, 4);
        $this->object->clearIdentity();
        $this->assertFalse($this->object->isAuth());
        $this->object->authenticate($user);
        $this->assertTrue($this->object->isAuth());
        $this->assertEquals($user, $this->object->getUser());
    }
    
    public function testSetResult()
    {
        $user = array(1, 2, 4);
        $result = new CompleXml_Auth_Result(CompleXml_Auth_Result::NOT_AUTH, $user);
        $time = $result->getDate();
        $this->object->setResult($result);
        $this->assertEquals($time, $this->object->getDate());
        $this->assertEquals(date('Y-m-d', $time), $this->object->getDate('Y-m-d'));
    }
    
    public function testBrokenAuth()
    {
        $user = array(1, 2, 4);
        $this->object->authenticate($user);
        $this->assertTrue($this->object->isAuth());
        $this->object->brokenAuth();
        $this->assertFalse($this->object->isAuth());
        $this->assertNull($this->object->getUser());
    }
    
    public function testGetResult()
    {
        $this->object->clearIdentity();
        $result = $this->object->getResult();
        $this->assertTrue($result->getStatus() <= 0);

        $this->object->authenticate(array(1, 2, 3));
        $result = $this->object->getResult();
        $this->assertTrue($result->getStatus() > 0);
    }
    
    public function testRoles()
    {
        CompleXml_Auth::getInstance()->clearIdentity();
        CompleXml_Auth::getInstance()->addRole('user1');
        CompleXml_Auth::getInstance()->addRole('user2');

        $this->assertFalse($this->object->getRoles());
        $this->object->authenticate(array(1,2,3));
        $this->assertEquals(array('user1', 'user2'), $this->object->getRoles());
        $this->object->removeRole('user2');
        $this->assertEquals(array('user1'), $this->object->getRoles());
        $this->object->flushRoles();
        $this->assertEquals(array(), $this->object->getRoles());
        $this->object->setRoles(array(1,2,3));
        $this->assertEquals(array(1,2,3), $this->object->getRoles());
    }
}

